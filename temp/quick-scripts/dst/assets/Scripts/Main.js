
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/Main.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '82164HSS5xI54qt5wku0rKP', 'Main');
// Scripts/Main.js

"use strict";

var _socketIo = require("./socket.io.js");

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var socket = null;
var playerMap = new Map();
var MainAPP = cc.Class({
  "extends": cc.Component,
  properties: {
    Player: {
      "default": null,
      type: cc.Prefab,
      serializable: true
    },
    playerID: {
      "default": "",
      visible: false
    }
  },
  statics: {
    instance: null
  },
  onPlayerMove: function onPlayerMove(posX, posY) {
    if (!cc.sys.isNative) {
      socket.emit('onPlayerMove', {
        "playerID": this.playerID,
        "posX": posX,
        "posY": posY
      });
    }
  },
  onPlayerShoot: function onPlayerShoot(posX, posY) {
    if (!cc.sys.isNative) {
      socket.emit('onPlayerShoot', {
        "playerID": this.playerID,
        "posX": posX,
        "posY": posY
      });
    }
  },
  updatePlayers: function updatePlayers(value, key, map) {
    console.log("m[".concat(key, "] = ").concat(value));
    var playerData = playerMap.get(key);

    if (!playerData) {
      var player = cc.instantiate(MainAPP.instance.Player);
      player.getComponent("Player").playerID = key;
      console.log("Create Player:", key, "==", MainAPP.instance.playerID, "==", key == this.playerID);
      player.setPosition(value.posX, value.posY);
      MainAPP.instance.node.addChild(player);
      playerMap.set(key, {
        "node": player,
        "playerID": key,
        "posX": value.posX,
        "posY": value.posY
      });
    } else {
      playerData.node.setPosition(value.posX, value.posY);
    }
  },
  serverHandler: function serverHandler() {
    var _this = this;

    if (!cc.sys.isNative) {
      socket = (0, _socketIo.connect)('https://space-shooter-cocos.herokuapp.com');
      socket.on('connect', function () {
        _this.playerID = socket.id;
        console.log('Socket connected id:', _this.playerID);
        socket.emit('CreatePlayer', 'Hello Server');
        socket.on('CreatePlayerResponse', function (data) {
          var newMap = new Map(JSON.parse(data));
          newMap.forEach(_this.updatePlayers);
        });
        socket.on('onPlayerMoveResponse', function (data) {
          var newMap = new Map(JSON.parse(data));
          newMap.forEach(_this.updatePlayers);
        });
        socket.on('onPlayerShootResponse', function (data) {
          if (playerMap.has(data.playerID)) {
            var playerData = playerMap.get(data.playerID);
            playerData.node.getComponent("Player").shoot(data.playerID, data.posX, data.posY);
          } else {
            console.log("onPlayerShootResponse not found player ", data.playerID);
          }
        });
        socket.on('playerDisconect', function (data) {
          if (playerMap.has(data)) {
            console.log("playerDisconect Client");
            playerMap.get(data).node.destroy();
          }
        });
      });
    }
  },
  onLoad: function onLoad() {
    MainAPP.instance = this;
    this.serverHandler();
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,