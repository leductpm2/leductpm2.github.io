
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/qs/test/utils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bb45bBNeopCD6c6kH0RISIa', 'utils');
// socketIOServer/node_modules/qs/test/utils.js

'use strict';

var test = require('tape');

var utils = require('../lib/utils');

test('merge()', function (t) {
  t.deepEqual(utils.merge({
    a: 'b'
  }, {
    a: 'c'
  }), {
    a: ['b', 'c']
  }, 'merges two objects with the same key');
  var oneMerged = utils.merge({
    foo: 'bar'
  }, {
    foo: {
      first: '123'
    }
  });
  t.deepEqual(oneMerged, {
    foo: ['bar', {
      first: '123'
    }]
  }, 'merges a standalone and an object into an array');
  var twoMerged = utils.merge({
    foo: ['bar', {
      first: '123'
    }]
  }, {
    foo: {
      second: '456'
    }
  });
  t.deepEqual(twoMerged, {
    foo: {
      0: 'bar',
      1: {
        first: '123'
      },
      second: '456'
    }
  }, 'merges a standalone and two objects into an array');
  var sandwiched = utils.merge({
    foo: ['bar', {
      first: '123',
      second: '456'
    }]
  }, {
    foo: 'baz'
  });
  t.deepEqual(sandwiched, {
    foo: ['bar', {
      first: '123',
      second: '456'
    }, 'baz']
  }, 'merges an object sandwiched by two standalones into an array');
  var nestedArrays = utils.merge({
    foo: ['baz']
  }, {
    foo: ['bar', 'xyzzy']
  });
  t.deepEqual(nestedArrays, {
    foo: ['baz', 'bar', 'xyzzy']
  });
  t.end();
});
test('assign()', function (t) {
  var target = {
    a: 1,
    b: 2
  };
  var source = {
    b: 3,
    c: 4
  };
  var result = utils.assign(target, source);
  t.equal(result, target, 'returns the target');
  t.deepEqual(target, {
    a: 1,
    b: 3,
    c: 4
  }, 'target and source are merged');
  t.deepEqual(source, {
    b: 3,
    c: 4
  }, 'source is untouched');
  t.end();
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();