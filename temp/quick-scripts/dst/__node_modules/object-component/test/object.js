
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/object-component/test/object.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c0ef5UOLuVGPazk1AzHvMIH', 'object');
// socketIOServer/node_modules/object-component/test/object.js

"use strict";

/**
 * Module dependencies.
 */
var object = require('..');

describe('.keys(obj)', function () {
  it('should return the keys of an object', function () {
    var obj = {
      name: 'tobi',
      age: 1
    };
    object.keys(obj).should.eql(['name', 'age']);
  });
});
describe('.values(obj)', function () {
  it('should return the values of an object', function () {
    var obj = {
      name: 'tobi',
      age: 1
    };
    object.values(obj).should.eql(['tobi', 1]);
  });
});
describe('.length(obj)', function () {
  it('should return key count', function () {
    var obj = {
      name: 'tobi',
      age: 1
    };
    object.length(obj).should.equal(2);
  });
});
describe('.merge(a, b)', function () {
  it('should merge two objects', function () {
    var a = {
      foo: 'bar'
    };
    var b = {
      bar: 'baz'
    };
    object.merge(a, b).should.eql({
      foo: 'bar',
      bar: 'baz'
    });
  });
  it('should give precedence to b', function () {
    var a = {
      foo: 'bar'
    };
    var b = {
      foo: 'baz'
    };
    object.merge(a, b).should.eql({
      foo: 'baz'
    });
  });
});
describe('.isEmpty()', function () {
  it('should check if the object is empty', function () {
    object.isEmpty({}).should.be["true"];
    object.isEmpty({
      foo: 'bar'
    }).should.be["false"];
  });
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();