
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/forwarded/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'edfa1L+ra1PXoyuuIGUq/Hk', 'index');
// socketIOServer/node_modules/forwarded/index.js

/*!
 * forwarded
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
'use strict';
/**
 * Module exports.
 * @public
 */

module.exports = forwarded;
/**
 * Get all addresses in the request, using the `X-Forwarded-For` header.
 *
 * @param {object} req
 * @return {array}
 * @public
 */

function forwarded(req) {
  if (!req) {
    throw new TypeError('argument req is required');
  } // simple header parsing


  var proxyAddrs = parse(req.headers['x-forwarded-for'] || '');
  var socketAddr = req.connection.remoteAddress;
  var addrs = [socketAddr].concat(proxyAddrs); // return all addresses

  return addrs;
}
/**
 * Parse the X-Forwarded-For header.
 *
 * @param {string} header
 * @private
 */


function parse(header) {
  var end = header.length;
  var list = [];
  var start = header.length; // gather addresses, backwards

  for (var i = header.length - 1; i >= 0; i--) {
    switch (header.charCodeAt(i)) {
      case 0x20:
        /*   */
        if (start === end) {
          start = end = i;
        }

        break;

      case 0x2c:
        /* , */
        if (start !== end) {
          list.push(header.substring(start, end));
        }

        start = end = i;
        break;

      default:
        start = i;
        break;
    }
  } // final address


  if (start !== end) {
    list.push(header.substring(start, end));
  }

  return list;
}

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();