
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/safer-buffer/dangerous.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '033a0S1BXZGuaC/F0flrUuA', 'dangerous');
// socketIOServer/node_modules/safer-buffer/dangerous.js

/* eslint-disable node/no-deprecated-api */
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var buffer = require('buffer');

var Buffer = buffer.Buffer;

var safer = require('./safer.js');

var Safer = safer.Buffer;
var dangerous = {};
var key;

for (key in safer) {
  if (!safer.hasOwnProperty(key)) continue;
  dangerous[key] = safer[key];
}

var Dangereous = dangerous.Buffer = {}; // Copy Safer API

for (key in Safer) {
  if (!Safer.hasOwnProperty(key)) continue;
  Dangereous[key] = Safer[key];
} // Copy those missing unsafe methods, if they are present


for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue;
  if (Dangereous.hasOwnProperty(key)) continue;
  Dangereous[key] = Buffer[key];
}

if (!Dangereous.allocUnsafe) {
  Dangereous.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + _typeof(size));
    }

    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }

    return Buffer(size);
  };
}

if (!Dangereous.allocUnsafeSlow) {
  Dangereous.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + _typeof(size));
    }

    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }

    return buffer.SlowBuffer(size);
  };
}

module.exports = dangerous;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();